//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : CDH Software
//  @ File Name : Logger.h
//  @ Date : 10/16/2007
//  @ Author :
//
//


#if !defined(_LOGGER_H)
#define _LOGGER_H


#include <stdarg.h>
#include <iostream>
#include <time.h>
#include <string>
#include <fstream>
#include <stdio.h>
#include <pthread.h>
#include <cstring>
#include <cstdlib>

#define BUFF_LEN 512
#define KB *1024
#define MB *1024*1024
#define SINGLEFILE false
#define MULTIFILES true

using namespace std;

enum LOGLEVEL
{
	NON=-1,
	FATAL=0,
	ERROR=1,
	WARNING=2,
	INFO=3,
	DEBUG=4,
	SPAM=5
};

class Logger
{
public:
	Logger(const char* processname);
	~Logger();
	void open(const char* filename);
	void lw(LOGLEVEL level, const char* message, ...);
	void lw(LOGLEVEL level, const std::string& message, ...);
	void flush();
	void close();
	void setlim(int lim);
	void setmaxlen(int bytes, bool multiplefiles);
private:
	int limit;    //level limit
	int maxlen;   //maxlen of the file, used for wrapping
	int isopen;   //has open() been called?
	int position; //position in the file, used for wrapping files
	bool startnew; //bool to start a new file or overwrite an existing file
	//only valid when maxlen is set
	char* an;
	char filename[256];
	char pname[256];
	char timestr[64];
	string buffer;
	fstream fout;
	pthread_mutex_t logMutex;
};

#endif  //_LOGGER_H
